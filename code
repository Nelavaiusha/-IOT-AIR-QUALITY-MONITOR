#include <WiFi.h>
#include "ThingSpeak.h"
#include <SoftwareSerial.h>

const char* ssid = "YourWiFiSSID";
const char* password = "YourWiFiPassword";
WiFiClient client;

// ThingSpeak
unsigned long channelID = YOUR_CHANNEL_ID;
const char* writeAPIKey = "YOUR_API_KEY";

// PM2.5 Sensor (PMS5003)
SoftwareSerial pmsSerial(16, 17); // RX, TX

// CO2 Sensor (MH-Z19)
SoftwareSerial co2Serial(21, 22); // RX, TX

void setup() {
  Serial.begin(115200);
  pmsSerial.begin(9600);
  co2Serial.begin(9600);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000); Serial.print(".");
  }

  ThingSpeak.begin(client);
}

void loop() {
  int pm25 = readPM25();
  int co2 = readCO2();

  ThingSpeak.setField(1, pm25);
  ThingSpeak.setField(2, co2);
  ThingSpeak.writeFields(channelID, writeAPIKey);

  Serial.println("PM2.5: " + String(pm25) + " ug/m3");
  Serial.println("CO2: " + String(co2) + " ppm");

  delay(15000); // ThingSpeak requires 15s delay
}

int readPM25() {
  if (pmsSerial.available() >= 32) {
    uint8_t buf[32];
    pmsSerial.readBytes(buf, 32);
    int pm25 = buf[12] << 8 | buf[13];
    return pm25;
  }
  return -1;
}

int readCO2() {
  byte cmd[9] = {0xFF, 0x01, 0x86, 0, 0, 0, 0, 0, 0x79};
  co2Serial.write(cmd, 9);
  delay(100);
  byte response[9];
  co2Serial.readBytes(response, 9);
  if (response[0] == 0xFF && response[1] == 0x86) {
    int co2 = response[2] * 256 + response[3];
    return co2;
  }
  return -1;
}
